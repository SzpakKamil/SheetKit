// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.14.8 clang-1700.3.14.6)
// swift-module-flags: -target arm64-apple-watchos10-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-upcoming-feature DisableOutwardActorInference -enable-upcoming-feature InferSendableFromCaptures -enable-upcoming-feature GlobalActorIsolatedTypesUsability -enable-upcoming-feature MemberImportVisibility -enable-upcoming-feature InferIsolatedConformances -enable-upcoming-feature NonisolatedNonsendingByDefault -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name SheetKit
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Foundation
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum SKRenderingMode {
  case monochrome
  case hierarchical
  public static func == (a: SheetKit.SKRenderingMode, b: SheetKit.SKRenderingMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SKComponentType : Swift.Hashable, Swift.Identifiable, Swift.Equatable {
  case header
  case highlight
  case forEach
  case field
  public var name: Swift.String {
    get
  }
  public var id: Swift.String {
    get
  }
  public static func == (lhs: SheetKit.SKComponentType, rhs: SheetKit.SKComponentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public enum SKSheetSize {
  case small
  case medium
  case large
  public var frameWidth: CoreFoundation.CGFloat {
    get
  }
  public var windowWidth: CoreFoundation.CGFloat {
    get
  }
  public var height: CoreFoundation.CGFloat {
    get
  }
  public static func == (a: SheetKit.SKSheetSize, b: SheetKit.SKSheetSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SheetKit.SKDatePicker {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func backgroundColor(_ color: SwiftUICore.Color? = nil) -> SheetKit.SKDatePicker
  #endif
}
extension SheetKit.SKDescription {
  @_Concurrency.MainActor @preconcurrency public func weight(_ weight: SwiftUICore.Font.Weight = .regular) -> SheetKit.SKDescription
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func font(_ font: SwiftUICore.Font? = nil) -> SheetKit.SKDescription
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func tint(_ color: SwiftUICore.Color? = nil) -> SheetKit.SKDescription
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func alignment(_ alignment: SwiftUICore.TextAlignment? = nil) -> SheetKit.SKDescription
  #endif
}
extension SheetKit.SKHeaderImage {
  @_Concurrency.MainActor @preconcurrency public func tint(_ color: SwiftUICore.Color = .accentColor) -> SheetKit.SKHeaderImage
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func alignment(_ alignment: SwiftUICore.HorizontalAlignment? = nil) -> SheetKit.SKHeaderImage
  #endif
  @_Concurrency.MainActor @preconcurrency public func variant(_ variant: SheetKit.SKHeaderImage.Variant = .none) -> SheetKit.SKHeaderImage
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func verticalPadding(_ padding: SheetKit.SKHeaderImage.VerticalPadding? = nil) -> SheetKit.SKHeaderImage
  #endif
  @_Concurrency.MainActor @preconcurrency public func renderingMode(_ mode: SheetKit.SKRenderingMode = .monochrome) -> SheetKit.SKHeaderImage
  @_Concurrency.MainActor @preconcurrency public func size(_ size: SheetKit.SKHeaderImage.Size = .medium) -> SheetKit.SKHeaderImage
  @_Concurrency.MainActor @preconcurrency public func weight(_ weight: SwiftUICore.Font.Weight = .regular) -> SheetKit.SKHeaderImage
}
extension SheetKit.SKHighlight {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func tint(_ color: SwiftUICore.Color? = nil) -> SheetKit.SKHighlight
  #endif
  @_Concurrency.MainActor @preconcurrency public func textColor(_ color: SwiftUICore.Color = .primary) -> SheetKit.SKHighlight
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func alignment(_ alignment: SwiftUICore.HorizontalAlignment? = nil) -> SheetKit.SKHighlight
  #endif
}
extension SheetKit.SKPage {
  @_Concurrency.MainActor @preconcurrency public func alert(isPresented: SwiftUICore.Binding<Swift.Bool>, title: Swift.String, description: Swift.String, type: SheetKit.SKPage.AlertType = .manual, @SwiftUICore.ViewBuilder content: @escaping () -> some View) -> SheetKit.SKPage
  @_Concurrency.MainActor @preconcurrency public func style(_ style: SheetKit.SKPage.BackgroundStyle = .list) -> SheetKit.SKPage
  @_Concurrency.MainActor @preconcurrency public func tint(_ color: SwiftUICore.Color) -> SheetKit.SKPage
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func alignment(_ alignment: SwiftUICore.HorizontalAlignment? = nil) -> SheetKit.SKPage
  #endif
}
extension SheetKit.SKSheet {
  @_Concurrency.MainActor @preconcurrency public func interactiveDismissDisabled(_ disabled: Swift.Bool = true) -> SheetKit.SKSheet
  @_Concurrency.MainActor @preconcurrency public func presentationDents(_ dents: Swift.Set<SwiftUI.PresentationDetent>) -> SheetKit.SKSheet
  @_Concurrency.MainActor @preconcurrency public func dragIndicatorVisibility(_ visibility: SwiftUICore.Visibility = .hidden) -> SheetKit.SKSheet
  @_Concurrency.MainActor @preconcurrency public func presentationDents(_ dents: Swift.Set<SwiftUI.PresentationDetent>, selection: SwiftUICore.Binding<SwiftUI.PresentationDetent>) -> SheetKit.SKSheet
  @_Concurrency.MainActor @preconcurrency public func tint(_ color: SwiftUICore.Color) -> SheetKit.SKSheet
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func alignment(_ alignment: SwiftUICore.HorizontalAlignment? = nil) -> SheetKit.SKSheet
  #endif
}
extension SheetKit.SKStepper {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func backgroundColor(_ color: SwiftUICore.Color? = nil) -> SheetKit.SKStepper<S>
  #endif
}
extension SheetKit.SKTextField {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func backgroundColor(_ color: SwiftUICore.Color? = nil) -> SheetKit.SKTextField
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func shape(cornerRadius: CoreFoundation.CGFloat? = nil) -> SheetKit.SKTextField
  #endif
}
extension SheetKit.SKTitle {
  @_Concurrency.MainActor @preconcurrency public func weight(_ weight: SwiftUICore.Font.Weight = .regular) -> SheetKit.SKTitle
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func font(_ font: SwiftUICore.Font? = nil) -> SheetKit.SKTitle
  #endif
  @_Concurrency.MainActor @preconcurrency public func tint(_ color: SwiftUICore.Color = .primary) -> SheetKit.SKTitle
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func alignment(_ alignment: SwiftUICore.TextAlignment? = nil) -> SheetKit.SKTitle
  #endif
}
@_Concurrency.MainActor @preconcurrency public protocol SKComponent : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency var type: SheetKit.SKComponentType { get }
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
extension SheetKit.SKComponent {
  @_Concurrency.MainActor @preconcurrency public func erasedContent() -> SwiftUICore.AnyView
}
extension SheetKit.SKDatePicker {
  public struct Data {
    #if compiler(>=5.3) && $NonescapableTypes
    public init(title: SwiftUICore.LocalizedStringKey, backgroundColor: SwiftUICore.Color? = nil, cornerRadius: CoreFoundation.CGFloat? = nil, range: Swift.ClosedRange<Foundation.Date>? = nil, selection: SwiftUICore.Binding<Foundation.Date>, components: SwiftUI.DatePickerComponents = .date)
    #endif
  }
}
@_Concurrency.MainActor @preconcurrency public struct SKDatePicker : SwiftUICore.View, SheetKit.SKComponent {
  @_Concurrency.MainActor @preconcurrency public let type: SheetKit.SKComponentType
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public init(_ title: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.ClosedRange<Foundation.Date>? = nil, components: SwiftUI.DatePickerComponents = .date)
  #endif
  public typealias Body = @_opaqueReturnTypeOf("$s8SheetKit12SKDatePickerV4bodyQrvp", 0) __
}

@_Concurrency.MainActor @preconcurrency public struct SKDatePickerWATCHOS : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(data: SheetKit.SKDatePicker.Data)
  public typealias Body = @_opaqueReturnTypeOf("$s8SheetKit19SKDatePickerWATCHOSV4bodyQrvp", 0) __
}
extension SheetKit.SKDescription {
  public struct Data {
    #if compiler(>=5.3) && $NonescapableTypes
    public init(title: Swift.String, weight: SwiftUICore.Font.Weight = .regular, font: SwiftUICore.Font? = nil, color: SwiftUICore.Color? = nil, alignment: SwiftUICore.TextAlignment? = nil)
    #endif
  }
}
@_Concurrency.MainActor @preconcurrency public struct SKDescription : SwiftUICore.View, SheetKit.SKComponent {
  @_Concurrency.MainActor @preconcurrency public let type: SheetKit.SKComponentType
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(data: SheetKit.SKDescription.Data)
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String)
  public typealias Body = @_opaqueReturnTypeOf("$s8SheetKit13SKDescriptionV4bodyQrvp", 0) __
}
extension SheetKit.SKHeaderImage {
  public struct Data {
    #if compiler(>=5.3) && $NonescapableTypes
    public init(image: SwiftUICore.Image, color: SwiftUICore.Color? = nil, variant: SheetKit.SKHeaderImage.Variant = .none, renderingMode: SheetKit.SKRenderingMode = .monochrome, verticalPadding: SheetKit.SKHeaderImage.VerticalPadding? = nil, weight: SwiftUICore.Font.Weight = .regular, alignment: SwiftUICore.HorizontalAlignment? = nil, size: SheetKit.SKHeaderImage.Size = .medium)
    #endif
  }
  public enum VerticalPadding : Swift.Hashable {
    case none
    case small
    case medium
    case large
    case custom(CoreFoundation.CGFloat)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SheetKit.SKHeaderImage.VerticalPadding, b: SheetKit.SKHeaderImage.VerticalPadding) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Size : Swift.Hashable {
    case large
    case medium
    case small
    case custom(CoreFoundation.CGFloat)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SheetKit.SKHeaderImage.Size, b: SheetKit.SKHeaderImage.Size) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Variant : Swift.CaseIterable {
    case fill
    case circle
    case none
    case rectangle
    case slash
    case square
    public static func == (a: SheetKit.SKHeaderImage.Variant, b: SheetKit.SKHeaderImage.Variant) -> Swift.Bool
    public typealias AllCases = [SheetKit.SKHeaderImage.Variant]
    nonisolated public static var allCases: [SheetKit.SKHeaderImage.Variant] {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@_Concurrency.MainActor @preconcurrency public struct SKHeaderImage : SheetKit.SKComponent {
  @_Concurrency.MainActor @preconcurrency public let type: SheetKit.SKComponentType
  @_Concurrency.MainActor @preconcurrency public init(data: SheetKit.SKHeaderImage.Data)
  @_Concurrency.MainActor @preconcurrency public init(systemName: Swift.String)
  @_Concurrency.MainActor @preconcurrency public init(image: SwiftUICore.Image)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8SheetKit13SKHeaderImageV4bodyQrvp", 0) __
}
extension SheetKit.SKHighlight {
  public struct Data {
    #if compiler(>=5.3) && $NonescapableTypes
    public init(title: Swift.String, description: Swift.String, image: SwiftUICore.Image, tintColor: SwiftUICore.Color? = nil, textColor: SwiftUICore.Color = .primary, alignment: SwiftUICore.HorizontalAlignment? = nil)
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public init(title: Swift.String, description: Swift.String, systemName: Swift.String, tintColor: SwiftUICore.Color? = nil, textColor: SwiftUICore.Color = .primary, alignment: SwiftUICore.HorizontalAlignment? = nil)
    #endif
  }
}
@_Concurrency.MainActor @preconcurrency public struct SKHighlight : SwiftUICore.View, SheetKit.SKComponent {
  @_Concurrency.MainActor @preconcurrency public let type: SheetKit.SKComponentType
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(data: SheetKit.SKHighlight.Data)
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String, description: Swift.String, image: SwiftUICore.Image)
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String, description: Swift.String, systemName: Swift.String)
  public typealias Body = @_opaqueReturnTypeOf("$s8SheetKit11SKHighlightV4bodyQrvp", 0) __
}
extension SheetKit.SKTextField {
  public struct Data {
    #if compiler(>=5.3) && $NonescapableTypes
    public init(title: Swift.String, backgroundColor: SwiftUICore.Color? = nil, cornerRadius: CoreFoundation.CGFloat? = nil)
    #endif
  }
}
@_Concurrency.MainActor @preconcurrency public struct SKTextField : SheetKit.SKComponent {
  @_Concurrency.MainActor @preconcurrency public let type: SheetKit.SKComponentType
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public init<F>(_ title: Swift.String, value: SwiftUICore.Binding<Swift.Double>, defaultValue: Swift.Double = 0, format: F, prompt: SwiftUICore.Text? = nil) where F : Foundation.ParseableFormatStyle, F.FormatInput == Swift.Double, F.FormatOutput == Swift.String
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public init<F>(_ title: Swift.String, value: SwiftUICore.Binding<Swift.Int>, defaultValue: Swift.Int = 0, format: F, prompt: SwiftUICore.Text? = nil) where F : Foundation.ParseableFormatStyle, F.FormatInput == Swift.Int, F.FormatOutput == Swift.String
  #endif
  public typealias Body = @_opaqueReturnTypeOf("$s8SheetKit11SKTextFieldV4bodyQrvp", 0) __
}

extension SheetKit.SKTitle {
  public struct Data {
    #if compiler(>=5.3) && $NonescapableTypes
    public init(title: Swift.String, weight: SwiftUICore.Font.Weight = .bold, font: SwiftUICore.Font? = nil, color: SwiftUICore.Color = .primary, alignment: SwiftUICore.TextAlignment? = nil)
    #endif
  }
}
@_Concurrency.MainActor @preconcurrency public struct SKTitle : SwiftUICore.View, SheetKit.SKComponent {
  @_Concurrency.MainActor @preconcurrency public let type: SheetKit.SKComponentType
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(data: SheetKit.SKTitle.Data)
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String)
  public typealias Body = @_opaqueReturnTypeOf("$s8SheetKit7SKTitleV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct SKForEach<Data, ID, Content> : SheetKit.SKComponent where Data : Swift.RandomAccessCollection, ID : Swift.Hashable, Content : SheetKit.SKComponent {
  @_Concurrency.MainActor @preconcurrency public let type: SheetKit.SKComponentType
  @_Concurrency.MainActor @preconcurrency public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUICore.ViewBuilder content: @escaping (Data.Element) -> Content)
  @_Concurrency.MainActor @preconcurrency public init<T>(_ data: Data, @SwiftUICore.ViewBuilder content: @escaping (Data.Element) -> Content) where ID == T.ID, T : Swift.Identifiable, T == Data.Element
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8SheetKit9SKForEachV4bodyQrvp", 0) __<Data, ID, Content>
}
@_functionBuilder public struct SKPageBuilder {
  public static func buildBlock(_ components: any SheetKit.SKComponent...) -> [any SheetKit.SKComponent]
  public static func buildArray(_ components: [[any SheetKit.SKComponent]]) -> [any SheetKit.SKComponent]
  #if compiler(>=5.3) && $NonescapableTypes
  public static func buildOptional(_ component: [any SheetKit.SKComponent]?) -> [any SheetKit.SKComponent]
  #endif
  public static func buildEither(first component: [any SheetKit.SKComponent]) -> [any SheetKit.SKComponent]
  public static func buildEither(second component: [any SheetKit.SKComponent]) -> [any SheetKit.SKComponent]
}
extension SheetKit.SKPage {
  public struct Alert {
    public init(isPresented: SwiftUICore.Binding<Swift.Bool>, title: Swift.String, description: Swift.String, type: SheetKit.SKPage.AlertType = .manual, @SwiftUICore.ViewBuilder content: @escaping () -> some View)
  }
  public struct Data {
    #if compiler(>=5.3) && $NonescapableTypes
    public init(backgroundStyle: SheetKit.SKPage.BackgroundStyle = .list, accentColor: SwiftUICore.Color? = nil, alignment: SwiftUICore.HorizontalAlignment? = nil, alert: SheetKit.SKPage.Alert? = nil, @SheetKit.SKPageBuilder content: () -> [any SheetKit.SKComponent], @SheetKit.SKToolbarBuilder toolbar: () -> [SheetKit.SKToolbarItem])
    #endif
  }
  public enum BackgroundStyle {
    case custom(light: SwiftUICore.Color, dark: SwiftUICore.Color)
    case list
    case form
  }
  public enum AlertType {
    case confirmation
    case dismissal
    case manual
    public static func == (a: SheetKit.SKPage.AlertType, b: SheetKit.SKPage.AlertType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@_Concurrency.MainActor @preconcurrency public struct SKPage : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(@SheetKit.SKPageBuilder content: () -> [any SheetKit.SKComponent], @SheetKit.SKToolbarBuilder toolbar: () -> [SheetKit.SKToolbarItem])
  public typealias Body = @_opaqueReturnTypeOf("$s8SheetKit6SKPageV4bodyQrvp", 0) __
}

@_Concurrency.MainActor @preconcurrency public struct SKScrollView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public let content: () -> Content
  @_Concurrency.MainActor @preconcurrency public let backgroundStyle: SheetKit.SKPage.BackgroundStyle
  @_Concurrency.MainActor @preconcurrency public let toolbar: SheetKit.SKToolbar
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(backgroundStyle: SheetKit.SKPage.BackgroundStyle, toolbar: SheetKit.SKToolbar, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  public typealias Body = @_opaqueReturnTypeOf("$s8SheetKit12SKScrollViewV4bodyQrvp", 0) __<Content>
}
@_functionBuilder public struct SKSheetBuilder {
  public static func buildBlock(_ components: SheetKit.SKPage...) -> [SheetKit.SKPage]
}
@_Concurrency.MainActor @preconcurrency public struct SKSheet : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func confirmationAction(currentIndex: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func dismissalAction(currentIndex: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public init(@SheetKit.SKSheetBuilder pages: () -> [SheetKit.SKPage])
  public typealias Body = @_opaqueReturnTypeOf("$s8SheetKit7SKSheetV4bodyQrvp", 0) __
}

extension SheetKit.SKStepper {
  public struct Data {
    #if compiler(>=5.3) && $NonescapableTypes
    public init(title: Swift.String, value: SwiftUICore.Binding<S>, range: Swift.ClosedRange<S>, step: S.Stride = 1, backgroundColor: SwiftUICore.Color? = nil, cornerRadius: CoreFoundation.CGFloat? = nil, textForValue: @escaping (S) -> Swift.String)
    #endif
  }
}
@_Concurrency.MainActor @preconcurrency public struct SKStepper<S> : SwiftUICore.View, SheetKit.SKComponent where S : Swift.Strideable {
  @_Concurrency.MainActor @preconcurrency public let type: SheetKit.SKComponentType
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(data: SheetKit.SKStepper<S>.Data)
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String, value: SwiftUICore.Binding<S>, step: S.Stride = 1, range: Swift.ClosedRange<S>, textForValue: @escaping (S) -> Swift.String = { s in "\(s)" })
  public typealias Body = @_opaqueReturnTypeOf("$s8SheetKit9SKStepperV4bodyQrvp", 0) __<S>
}
@_functionBuilder public struct SKToolbarBuilder {
  public static func buildBlock(_ components: SheetKit.SKToolbarItem...) -> [SheetKit.SKToolbarItem]
}
extension SheetKit.SKToolbar {
  public struct Data {
    public init(@SheetKit.SKToolbarBuilder content: () -> [SheetKit.SKToolbarItem])
  }
}
@_Concurrency.MainActor @preconcurrency public struct SKToolbar : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(data: SheetKit.SKToolbar.Data)
  @_Concurrency.MainActor @preconcurrency public init(@SheetKit.SKToolbarBuilder content: () -> [SheetKit.SKToolbarItem])
  public typealias Body = @_opaqueReturnTypeOf("$s8SheetKit9SKToolbarV4bodyQrvp", 0) __
}

extension SheetKit.SKToolbarItem {
  public struct Data : Swift.Identifiable, Swift.Hashable {
    public let id: Foundation.UUID
    public init(placement: SheetKit.SKToolbarItem.Placement, @SwiftUICore.ViewBuilder content: @escaping (@escaping () -> Swift.Void) -> some View)
    public static func == (lhs: SheetKit.SKToolbarItem.Data, rhs: SheetKit.SKToolbarItem.Data) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = Foundation.UUID
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Placement {
    case primary
    case secondary
    case navigation
    case note
    public static func == (a: SheetKit.SKToolbarItem.Placement, b: SheetKit.SKToolbarItem.Placement) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@_Concurrency.MainActor @preconcurrency public struct SKToolbarItem : SwiftUICore.View, Swift.Identifiable, Swift.Hashable {
  @_Concurrency.MainActor @preconcurrency public var id: Foundation.UUID {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(placement: SheetKit.SKToolbarItem.Placement, @SwiftUICore.ViewBuilder content: @escaping (@escaping () -> Swift.Void) -> some View)
  @_Concurrency.MainActor @preconcurrency public static func == (lhs: SheetKit.SKToolbarItem, rhs: SheetKit.SKToolbarItem) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func hash(into hasher: inout Swift.Hasher)
  public typealias Body = @_opaqueReturnTypeOf("$s8SheetKit13SKToolbarItemV4bodyQrvp", 0) __
  public typealias ID = Foundation.UUID
  @_Concurrency.MainActor @preconcurrency public var hashValue: Swift.Int {
    get
  }
}
extension SheetKit.SKRenderingMode : Swift.Equatable {}
extension SheetKit.SKRenderingMode : Swift.Hashable {}
extension SheetKit.SKSheetSize : Swift.Equatable {}
extension SheetKit.SKSheetSize : Swift.Hashable {}
extension SheetKit.SKDatePicker : Swift.Sendable {}
extension SheetKit.SKDescription : Swift.Sendable {}
extension SheetKit.SKHeaderImage : Swift.Sendable {}
extension SheetKit.SKHighlight : Swift.Sendable {}
extension SheetKit.SKPage : Swift.Sendable {}
extension SheetKit.SKSheet : Swift.Sendable {}
extension SheetKit.SKStepper : Swift.Sendable {}
extension SheetKit.SKTextField : Swift.Sendable {}
extension SheetKit.SKTitle : Swift.Sendable {}
extension SheetKit.SKDatePickerWATCHOS : Swift.Sendable {}
extension SheetKit.SKHeaderImage.Variant : Swift.Equatable {}
extension SheetKit.SKHeaderImage.Variant : Swift.Hashable {}
extension SheetKit.SKForEach : Swift.Sendable {}
extension SheetKit.SKPage.AlertType : Swift.Equatable {}
extension SheetKit.SKPage.AlertType : Swift.Hashable {}
extension SheetKit.SKScrollView : Swift.Sendable {}
extension SheetKit.SKToolbar : Swift.Sendable {}
extension SheetKit.SKToolbarItem : Swift.Sendable {}
extension SheetKit.SKToolbarItem.Placement : Swift.Equatable {}
extension SheetKit.SKToolbarItem.Placement : Swift.Hashable {}
